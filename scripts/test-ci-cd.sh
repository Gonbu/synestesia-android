#!/bin/bash

# Script de test pour v√©rifier la configuration des workflows CI/CD
# Usage: ./scripts/test-ci-cd.sh

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE} $1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_failure() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "app/build.gradle.kts" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

print_header "Test de Configuration CI/CD Firebase App Distribution"

# Test 1: V√©rification des fichiers de configuration
print_message "1. V√©rification des fichiers de configuration..."

# V√©rifier les workflows CI/CD
if [ -f ".github/workflows/firebase-app-distribution.yml" ]; then
    print_success "GitHub Actions workflow trouv√©"
else
    print_failure "GitHub Actions workflow manquant"
fi

if [ -f ".gitlab-ci.yml" ]; then
    print_success "GitLab CI pipeline trouv√©"
else
    print_failure "GitLab CI pipeline manquant"
fi

# V√©rifier les scripts de d√©ploiement
if [ -f "scripts/deploy-to-firebase.sh" ]; then
    print_success "Script de d√©ploiement principal trouv√©"
else
    print_failure "Script de d√©ploiement principal manquant"
fi

if [ -f "scripts/deploy-local.sh" ]; then
    print_success "Script de d√©ploiement local trouv√©"
else
    print_failure "Script de d√©ploiement local manquant"
fi

# Test 2: V√©rification de la configuration Firebase
print_message "2. V√©rification de la configuration Firebase..."

if [ -f "app/google-services.json" ]; then
    print_success "google-services.json trouv√©"
else
    print_failure "google-services.json manquant"
fi

if [ -f "firebase-groups.txt" ]; then
    print_success "firebase-groups.txt trouv√©"
    print_message "   Groupes configur√©s: $(cat firebase-groups.txt)"
else
    print_failure "firebase-groups.txt manquant"
fi

if [ -f "release_notes.txt" ]; then
    print_success "release_notes.txt trouv√©"
else
    print_failure "release_notes.txt manquant"
fi

# Test 3: V√©rification de la configuration Gradle
print_message "3. V√©rification de la configuration Gradle..."

# V√©rifier que le plugin Firebase App Distribution est configur√©
if grep -q "com.google.firebase.appdistribution" app/build.gradle.kts; then
    print_success "Plugin Firebase App Distribution configur√© dans app/build.gradle.kts"
else
    print_failure "Plugin Firebase App Distribution manquant dans app/build.gradle.kts"
fi

# V√©rifier que la configuration firebaseAppDistribution est pr√©sente
if grep -q "firebaseAppDistribution" app/build.gradle.kts; then
    print_success "Configuration firebaseAppDistribution trouv√©e"
else
    print_failure "Configuration firebaseAppDistribution manquante"
fi

# Test 4: V√©rification des t√¢ches Gradle
print_message "4. V√©rification des t√¢ches Gradle..."

# V√©rifier que les t√¢ches Firebase sont disponibles
if ./gradlew :app:tasks --all | grep -q "appDistributionUploadDebug"; then
    print_success "T√¢che appDistributionUploadDebug disponible"
else
    print_failure "T√¢che appDistributionUploadDebug manquante"
fi

if ./gradlew :app:tasks --all | grep -q "appDistributionUploadRelease"; then
    print_success "T√¢che appDistributionUploadRelease disponible"
else
    print_failure "T√¢che appDistributionUploadRelease manquante"
fi

# Test 5: Test de compilation
print_message "5. Test de compilation..."

if ./gradlew :app:assembleDebug --dry-run > /dev/null 2>&1; then
    print_success "Compilation debug r√©ussie"
else
    print_failure "Compilation debug √©chou√©e"
fi

# Test 6: Test de d√©ploiement (dry-run)
print_message "6. Test de d√©ploiement (dry-run)..."

if ./gradlew :app:appDistributionUploadDebug --dry-run > /dev/null 2>&1; then
    print_success "D√©ploiement debug (dry-run) r√©ussi"
else
    print_failure "D√©ploiement debug (dry-run) √©chou√©"
fi

# Test 7: V√©rification de la documentation
print_message "7. V√©rification de la documentation..."

if [ -f "docs/FIREBASE_APP_DISTRIBUTION.md" ]; then
    print_success "Documentation Firebase App Distribution trouv√©e"
else
    print_failure "Documentation Firebase App Distribution manquante"
fi

if [ -f "docs/CI_CD_WORKFLOWS.md" ]; then
    print_success "Documentation CI/CD trouv√©e"
else
    print_failure "Documentation CI/CD manquante"
fi

# Test 8: V√©rification des permissions
print_message "8. V√©rification des permissions..."

if [ -x "scripts/deploy-to-firebase.sh" ]; then
    print_success "Script deploy-to-firebase.sh ex√©cutable"
else
    print_warning "Script deploy-to-firebase.sh non ex√©cutable"
    print_message "   Ex√©cuter: chmod +x scripts/deploy-to-firebase.sh"
fi

if [ -x "scripts/deploy-local.sh" ]; then
    print_success "Script deploy-local.sh ex√©cutable"
else
    print_warning "Script deploy-local.sh non ex√©cutable"
    print_message "   Ex√©cuter: chmod +x scripts/deploy-local.sh"
fi

# R√©sum√© final
print_header "R√©sum√© des Tests"

print_message "Configuration CI/CD Firebase App Distribution v√©rifi√©e !"
print_message ""
print_message "üìã Prochaines √©tapes :"
print_message "1. Configurer le secret GOOGLE_SERVICES_JSON dans GitHub/GitLab"
print_message "2. Tester les workflows avec des branches de test"
print_message "3. V√©rifier les d√©ploiements dans Firebase Console"
print_message ""
print_message "üîß En cas de probl√®me :"
print_message "- Consulter CI_CD_SETUP.md pour la configuration"
print_message "- Utiliser ./scripts/deploy-local.sh pour les tests locaux"
print_message "- V√©rifier les logs CI/CD dans votre plateforme"

print_header "Tests Termin√©s"
